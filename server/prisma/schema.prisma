// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  code        String          @unique
  email       String          @unique
  password    String
  name        String
  phoneNumber String?
  avatar      String          @default("https://firebasestorage.googleapis.com/v0/b/do-an-tot-nghiep-16a34.appspot.com/o/images%2Fsystem%2Fdefault-avatar.jpg?alt=media&token=aa3b94e4-84ce-49c5-9631-f5e60db102fa")
  isAdmin     Boolean         @default(false)
  address     Address?
  cart        ProductInCart[]
  reviews     Review[]
  orders      Order[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model Product {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  code       String   @unique
  name       String
  image      String
  amount     Int
  price      Float
  unit       String
  isActive   Boolean  @default(true) // Nếu ko đang kích hoạt tức là ko bán
  gallery    String[]
  desc       String?
  categoryId String   @db.ObjectId
  category   Category @relation(fields: [categoryId], references: [id])
  reviews    Review[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Category {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  code      String    @unique
  name      String    @unique
  image     String
  desc      String?
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Order {
  id         String           @id @default(auto()) @map("_id") @db.ObjectId
  code       String           @unique
  status     Int              @default(1) // 1: Pending; 2: Confirmed; 3: Success
  note       String?
  totalMoney Int
  userId     String           @db.ObjectId
  user       User             @relation(fields: [userId], references: [id])
  products   ProductInOrder[]
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  score     Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

type Address {
  district String?
  city     String?
  detail   String?
}

type ProductInCart {
  id           String @db.ObjectId
  code         String
  name         String
  image        String
  amount       Int // Số lượng trong giỏ
  price        Float
  unit         String
  categoryId   String @db.ObjectId
  categoryName String
}

type ProductInOrder {
  id           String @db.ObjectId
  code         String
  name         String
  image        String
  amount       Int // Số lượng mua
  price        Float
  unit         String
  categoryId   String @db.ObjectId
  categoryName String
}
