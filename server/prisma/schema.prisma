// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  code             String             @unique
  email            String             @unique
  password         String
  name             String
  phoneNumber      String?
  avatar           String             @default("https://firebasestorage.googleapis.com/v0/b/do-an-tot-nghiep-16a34.appspot.com/o/images%2Fsystem%2Fdefault-avatar.jpg?alt=media&token=aa3b94e4-84ce-49c5-9631-f5e60db102fa")
  isAdmin          Boolean            @default(false)
  address          Address?
  cart             ProductInCart[]
  reviews          Review[]
  orders           Order[]
  viewHistorys     ViewHistory[]
  inventoryReceipt InventoryReceipt[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model Product {
  id                           String                   @id @default(auto()) @map("_id") @db.ObjectId
  code                         String                   @unique
  name                         String
  image                        String
  amount                       Int
  price                        Float
  unit                         String
  isActive                     Boolean                  @default(true) // Nếu ko đang kích hoạt tức là ko bán
  gallery                      String[]
  desc                         String?
  categoryId                   String                   @db.ObjectId
  category                     Category                 @relation(fields: [categoryId], references: [id])
  viewHistory                  ViewHistory[]
  reviews                      Review[]
  associationRuleAntecedentIds String[]                 @db.ObjectId
  associationRuleAntecedents   AssociationRule[]        @relation(name: "antecedent", fields: [associationRuleAntecedentIds], references: [id])
  associationRuleConsequentIds String[]                 @db.ObjectId
  associationRuleConsequents   AssociationRule[]        @relation(name: "consequent", fields: [associationRuleConsequentIds], references: [id])
  transactionId                String[]                 @db.ObjectId
  transactions                 Transaction[]            @relation(name: "transaction", fields: [transactionId], references: [id])
  inventoryReceiptsDetails     InventoryReceiptDetail[]
  orderDetails                 OrderDetail[]
  createdAt                    DateTime                 @default(now())
  updatedAt                    DateTime                 @updatedAt
}

model Category {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  code      String    @unique
  name      String    @unique
  image     String
  desc      String?
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Order {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  code              String        @unique
  status            Int           @default(1) // 1: Pending; 2: Confirmed; 3: Success
  note              String?
  totalMoney        Int
  userName          String
  userPhoneNumber   String
  userEmail         String
  userCity          String
  userDistrict      String
  userAddressDetail String
  userId            String        @db.ObjectId
  user              User          @relation(fields: [userId], references: [id])
  orderDetails      OrderDetail[]
  transaction       Transaction[]
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

model OrderDetail {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  amount    Int
  price     Float
  total     Float
  orderId   String   @db.ObjectId
  order     Order    @relation(fields: [orderId], references: [id])
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model InventoryReceipt {
  id                      String                   @id @default(auto()) @map("_id") @db.ObjectId
  code                    String                   @unique
  note                    String?
  totalMoney              Float
  userId                  String                   @db.ObjectId
  user                    User                     @relation(fields: [userId], references: [id])
  inventoryReceiptDetails InventoryReceiptDetail[]
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
}

model InventoryReceiptDetail {
  id                 String           @id @default(auto()) @map("_id") @db.ObjectId
  importPrice        Float
  amount             Int
  productId          String           @db.ObjectId
  product            Product          @relation(fields: [productId], references: [id])
  inventoryReceiptId String           @db.ObjectId
  inventoryReceipt   InventoryReceipt @relation(fields: [inventoryReceiptId], references: [id])
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  score     Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ViewHistory {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AssociationRule {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  antecedents        String[]  @db.ObjectId
  consequents        String[]  @db.ObjectId
  antecedentSupport  Float
  consequentSupport  Float
  support            Float
  confidence         Float
  lift               Float
  productAntecedents Product[] @relation(name: "antecedent", fields: [antecedents], references: [id])
  productConsequents Product[] @relation(name: "consequent", fields: [consequents], references: [id])
}

model Transaction {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  orderId    String?   @db.ObjectId
  order      Order?    @relation(fields: [orderId], references: [id])
  productIds String[]  @db.ObjectId
  products   Product[] @relation(name: "transaction", fields: [productIds], references: [id])
}

type Address {
  district String?
  city     String?
  detail   String?
}

type ProductInCart {
  id           String @db.ObjectId
  code         String
  name         String
  image        String
  amount       Int // Số lượng trong giỏ
  price        Float
  unit         String
  categoryId   String @db.ObjectId
  categoryName String
}

type ProductInOrder {
  id           String @db.ObjectId
  code         String
  name         String
  image        String
  amount       Int // Số lượng mua
  price        Float
  unit         String
  categoryId   String @db.ObjectId
  categoryName String
}
